<?php

use Drupal\node\Entity\Node;
use Drupal\simplepay\Form\SettingsForm;
use Drupal\simplepay\Form\PaymentForm;
use Drupal\Core\Entity\EntityStorageException;

function simplepay_preprocess_node(array &$variables) {

  $config_factory = \Drupal::service('config.factory');
  $config = $config_factory->get(SettingsForm::SETTINGS);
  $fail_url_id = $config->get('data')['response_fail_url'];
  $success_url_id = $config->get('data')['response_success_url'];
  $cancel_url_id = $config->get('data')['response_cancel_url'];
  $timeout_url_id = $config->get('data')['response_timeout_url'];

  if (!empty($variables['elements']['#node'])
    && $variables['elements']['#node'] instanceof Node
    && ($variables['elements']['#node']->id() === $success_url_id ||
      $variables['elements']['#node']->id() === $fail_url_id ||
      $variables['elements']['#node']->id() === $cancel_url_id ||
      $variables['elements']['#node']->id() === $timeout_url_id)
  ) {
    if ($variables['elements']['#node']->id() === $success_url_id) {
      $r = \Drupal::request()->query->get('r');
      $s = \Drupal::request()->query->get('s');
      $response = PaymentForm::checkHash($r, $s);

      if ($response) {

        /** @var \Drupal\simplepay\Entity\Payment $payment */
        $entity = \Drupal::entityTypeManager()->getStorage('payment');
        $results = $entity->loadByProperties([
          'transaction_id' => $response['t'],
          'order_id' => $response['o'],
        ]);
        $payment = reset($results);
        $payment->setStatus($response['e']);
        try {
          $payment->save();
        } catch (EntityStorageException $e) {
        }
      }

    }

  }
}
